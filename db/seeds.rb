# This file should contain all the record creation needed to seed the database with its default values.
# The data can then be loaded with the bin/rails db:seed command (or created alongside the database with db:setup).
#
# Examples:
#
#   movies = Movie.create([{ name: 'Star Wars' }, { name: 'Lord of the Rings' }])
#   Character.create(name: 'Luke', movie: movies.first)

puts "Creating: Java Building Blocks"
Material.create!([
    {category: "Java Building Blocks",
    sub_category: "Understanding the Java Class Structure",
    title: "",
        content: "Classes are the main building-blocks of Java Programs."},
    {category: "Java Building Blocks",
    sub_category: "Understanding the Java Class Structure",
    title: "",
        content: "An object is a runtime instance of a class in memory. "},
    {category: "Java Building Blocks",
    sub_category: "Understanding the Java Class Structure",
    title: "",
        content: "To use a class I have to create an object. All various objects of all classes represent the state of the program."},
    {category: "Java Building Blocks",
    sub_category: "Understanding the Java Class Structure",
    title: "Fields and Methods",
        content: "Java classes are made up of methods and fields, these are called members of a class. Fields store the state, methods act on the state and modify it. If a change needs to be saved it is stored in a field."},
    {category: "Java Building Blocks",
    sub_category: "Understanding the Java Class Structure",
    title: "Fields and Methods",
        content: "A keyword is a special - reserved word in Java and it can't be used as a class or variable name."},
    {category: "Java Building Blocks",
    sub_category: "Understanding the Java Class Structure",
    title: "Fields and Methods",
        content: "A method is an operation that can be called."},
    {category: "Java Building Blocks",
    sub_category: "Understanding the Java Class Structure",
    title: "Fields and Methods",
        content: "A parameter is required information to be supplied when calling a method."},
    {category: "Java Building Blocks",
    sub_category: "Understanding the Java Class Structure",
    title: "Comments",
        content: "Comments aren't executable code and can be placed anywhere."},
    {category: "Java Building Blocks",
    sub_category: "Understanding the Java Class Structure",
    title: "Comments",
        content: "The three types: <br> - Single line - begin with two slashes <code>//</code>.<br>
    - Multi line - begin with <code>/*</code> and end with <code>*/</code>.<br>
    - Java-doc - begins with <code>/**</code> and ends with <code>*/</code>. It is special and understood by the Java-doc tool."},
    {category: "Java Building Blocks",
    sub_category: "Understanding the Java Class Structure",
    title: "Classes vs. Files",
        content: "Almost every time a Java class is in its own <code>.java</code> file."},
    {category: "Java Building Blocks",
    sub_category: "Understanding the Java Class Structure",
    title: "Classes vs. Files",
        content: "It is mostly public, but Java accepts classes that are not public too."},
    {category: "Java Building Blocks",
    sub_category: "Understanding the Java Class Structure",
    title: "Classes vs. Files",
        content: "Multiple classes can be in one file but at least one must be <code>public</code> and match the file name, otherwise it won't compile."},
    {category: "Java Building Blocks",
    sub_category: "Writing a <code>main()</code> Method",
    title: "",
        content: "The <code>main()</code> method is the gateway between the startup of a Java process and the programmer's code. It is telling the underlying system to allocate CPU time, memory and so on."},
    {category: "Java Building Blocks",
    sub_category: "Writing a <code>main()</code> Method",
    title: "",
        content: "<code>public static void main(String[] args) {}</code> or <code>main(String args[])</code> or <code>main(String... args)</code> is the standard may to write the main method signature. <br>
    - <code>public</code> is an access modifier and means that any class from anywhere has access to that method.<br>
    - <code>static</code> binds the method to its class so it can be called by just the class name.<br>
    - <code>void</code> is a return type and says that the method doesn't return anything.<br>
    - <code>main</code> is the method name.<br>
    - <code>String</code> is a <code>java.lang.String</code> object, any input in the terminal will be read as a string.<br>
    - <code>(String args[])</code> is a parameter list."},
    {category: "Java Building Blocks",
    sub_category: "Writing a <code>main()</code> Method",
    title: "",
        content: "Arguments are separated by space in the terminal, and arguments with a space need to be in quotes."},
    {category: "Java Building Blocks",
    sub_category: "Writing a <code>main()</code> Method",
    title: "",
        content: "The brackets <code>[]</code> are a symbol for an array."},
    {category: "Java Building Blocks",
    sub_category: "Writing a <code>main()</code> Method",
    title: "",
        content: "<code>args</code> means arguments but can be anything."},
    {category: "Java Building Blocks",
    sub_category: "Writing a <code>main()</code> Method",
    title: "",
        content: "Java code is being compiled into bytecode and the JVM reads it."},
    {category: "Java Building Blocks",
    sub_category: "Writing a <code>main()</code> Method",
    title: "",
        content: "Compiling a <code>.java</code> by typing <code>javac className.java</code> turns it into a <code>.class</code>."},
    {category: "Java Building Blocks",
    sub_category: "Writing a <code>main()</code> Method",
    title: "",
        content: "<code>className</code> and <code>.java</code> filename have to be the same and case sensitively so."},
    {category: "Java Building Blocks",
    sub_category: "Writing a <code>main()</code> Method",
    title: "",
        content: "To run a Java program you type <code>java</code> and the <code>.class</code> name without <code>.class</code> at the end."},
    {category: "Java Building Blocks",
    sub_category: "Writing a <code>main()</code> Method",
    title: "",
        content: "To access an arrays objects, suffix <code>[0]</code> starting with zero and up."},
    {category: "Java Building Blocks",
    sub_category: "Understanding Package Declarations and Imports",
    title: "",
        content: "Java package names are hierarchical, from parent to child packages."},
    {category: "Java Building Blocks",
    sub_category: "Understanding Package Declarations and Imports",
    title: "Wildcards",
        content: "Classes from the same package are imported together using a wildcard <code>*</code>. "},
    {category: "Java Building Blocks",
    sub_category: "Understanding Package Declarations and Imports",
    title: "Wildcards",
        content: "They don't slow down the program because the compiler figures out which packages it needs."},
    {category: "Java Building Blocks",
    sub_category: "Understanding Package Declarations and Imports",
    title: "Wildcards",
        content: "It shortens the import list but it is more readable and understandable to the programmers if all the used packages are explicitly imported."},
    {category: "Java Building Blocks",
    sub_category: "Understanding Package Declarations and Imports",
    title: "Redundant Imports",
        content: "<code>java.lang</code> is a special package because it gets imported every time."},
    {category: "Java Building Blocks",
    sub_category: "Understanding Package Declarations and Imports",
    title: "Redundant Imports",
        content: "It is redundant to import classes twice, from a wild card and explicitly."},
    {category: "Java Building Blocks",
    sub_category: "Understanding Package Declarations and Imports",
    title: "Redundant Imports",
        content: "Classes get imported from packages but not class methods or folders of packages."},
    {category: "Java Building Blocks",
    sub_category: "Understanding Package Declarations and Imports",
    title: "Naming Conflicts",
        content: "If there are naming conflicts where I import the same class name from different packages by wildcard, Java throws an error. If we use an explicit name for the one and a wildcard for the other, it will work."},
    {category: "Java Building Blocks",
    sub_category: "Understanding Package Declarations and Imports",
    title: "Naming Conflicts",
        content: "If we need both, we always use both long names in the code."},
    {category: "Java Building Blocks",
    sub_category: "Understanding Package Declarations and Imports",
    title: "Creating a New Package",
        content: "First line of code: <code>package <package name>;</code> Is the folder within which the class is saved."},
    {category: "Java Building Blocks",
    sub_category: "Understanding Package Declarations and Imports",
    title: "Code Formatting on the Exam",
        content: "If code starts with line 1 and a necessary import is missing, the code does not compile."},
    {category: "Java Building Blocks",
    sub_category: "Creating Objects",
    title: "",
        content: "An object is an instance of a class."},
    {category: "Java Building Blocks",
    sub_category: "Creating Objects",
    title: "Constructors",
        content: "Declaring an instance method happens by writing <code>new</code> in front of the name of the method with <code>()</code>."},
    {category: "Java Building Blocks",
    sub_category: "Creating Objects",
    title: "Constructors",
        content: "<code>()</code> means that you have a constructor method."},
    {category: "Java Building Blocks",
    sub_category: "Creating Objects",
    title: "Constructors",
        content: "A constructor is a special type of method that creates a new object."},
    {category: "Java Building Blocks",
    sub_category: "Creating Objects",
    title: "Constructors",
        content: "Only constructor methods can be called by <code>new ConstrictorName();</code>."},
    {category: "Java Building Blocks",
    sub_category: "Creating Objects",
    title: "Constructors",
        content: "Example: <code>Random r = new Random();</code>. <br>
    - The first <code>Random</code> is the data type declaration, <code>r</code> is the object reference variable name <code>new</code> initializes the construction of the instance and <code>Random</code> is the constructor methods name;"},
    {category: "Java Building Blocks",
    sub_category: "Creating Objects",
    title: "Constructors",
        content: "The constructors name matches its class name and doesn't have a return type keyword."},
    {category: "Java Building Blocks",
    sub_category: "Creating Objects",
    title: "Constructors",
        content: "Fields can be declared in the constructor or in line (outside of it - in the class.)."},
    {category: "Java Building Blocks",
    sub_category: "Creating Objects",
    title: "Reading and Writing Object Fields",
        content: "It is possible to read and write variables directly form the caller."},
    {category: "Java Building Blocks",
    sub_category: "Creating Objects",
    title: "Reading and Writing Object Fields",
        content: "Reading is referred to as getting it and writing is referred to as setting it."},
    {category: "Java Building Blocks",
    sub_category: "Creating Objects",
    title: "Instance Initializer Blocks",
        content: "Code that is between curly braces is called a code block."},
    {category: "Java Building Blocks",
    sub_category: "Creating Objects",
    title: "Instance Initializer Blocks",
        content: "Instance initializers are code-blocks outside of methods."},
    {category: "Java Building Blocks",
    sub_category: "Creating Objects",
    title: "Instance Initializer Blocks",
        content: "The same number of opening and closing braces are necessary, otherwise the code doesn't compile."},
    {category: "Java Building Blocks",
    sub_category: "Creating Objects",
    title: "Order of Initialization",
        content: "1. First instance initializers and fields are run in the order they appear in. <br>
    2. Than the constructor is run. <br>
    3. Than the <code>main()</code>."},
    {category: "Java Building Blocks",
    sub_category: "Distinguishing Between Object References and Primitives",
    title: "",
        content: "Java applications contain two types of data: primitive types and reference types."},
    {category: "Java Building Blocks",
    sub_category: "Distinguishing Between Object References and Primitives",
    title: "Primitive Types",
        content: "There are 8 different primitive types: <br>
    1. <code>boolean</code>, true or false. <br>
    2. <code>byte</code>, 8-bits integral value, min. value = -128 & max. value = 127. <br>
    3. <code>short</code>, 16-bits integral value.<br>
    4. <code>int</code>, 32-bits integral value.<br>
    5. <code>long</code>, 64-bits integral value.<br>
    6. <code>float</code>, 32-bits floating-point value.<br>
    7. <code>double</code>, 64-bits floating-point value.<br>
    8. <code>char</code>, 16-bits."},
    {category: "Java Building Blocks",
    sub_category: "Distinguishing Between Object References and Primitives",
    title: "Primitive Types",
        content: "Floats require the letter <code>f</code> following the number."},
    {category: "Java Building Blocks",
    sub_category: "Distinguishing Between Object References and Primitives",
    title: "Primitive Types",
        content: "When a number is present in the code it's called a literal."},
    {category: "Java Building Blocks",
    sub_category: "Distinguishing Between Object References and Primitives",
    title: "Primitive Types",
        content: "Add a big <code>L</code> after a <code>long</code> number."},
    {category: "Java Building Blocks",
    sub_category: "Distinguishing Between Object References and Primitives",
    title: "Primitive Types",
        content: "Underscores in numbers are OK since Java 7, but they can't be at the beginning, end or next to a decimal point."},
    {category: "Java Building Blocks",
    sub_category: "Distinguishing Between Object References and Primitives",
    title: "Primitive Types",
        content: "Different Base types: <br>
    - Base 10. (0-9). <br>
    - Hexadecimal, with a prefix of 0X or 0x (0-9 and A-F).<br>
    - Binary, 0b or 0B. (0-1)<br>
    - Octal, prefix 0 (0-7)."},
    {category: "Java Building Blocks",
    sub_category: "Distinguishing Between Object References and Primitives",
    title: "Reference Types",
        content: "A reference type refers to an object or instance of a class."},
    {category: "Java Building Blocks",
    sub_category: "Distinguishing Between Object References and Primitives",
    title: "Reference Types",
        content: "References don't hold the value the of object they refer to."},
    {category: "Java Building Blocks",
    sub_category: "Distinguishing Between Object References and Primitives",
    title: "Reference Types",
        content: "Java stores the memory address of the object and one can't know the actual address in memory unlike other languages."},
    {category: "Java Building Blocks",
    sub_category: "Distinguishing Between Object References and Primitives",
    title: "Reference Types",
        content: "The reference address as well as the variable name are also known as a pointer."},
    {category: "Java Building Blocks",
    sub_category: "Distinguishing Between Object References and Primitives",
    title: "Reference Types",
        content: "Reference types can be reassigned to a different object from the same type or to a new object using the <code>new</code> keyword."},
    {category: "Java Building Blocks",
    sub_category: "Distinguishing Between Object References and Primitives",
    title: "Key Differences",
        content: "Reference types can be assigned <code>null</code>, primitive types can't."},
     {category: "Java Building Blocks",
    sub_category: "Distinguishing Between Object References and Primitives",
    title: "Key Differences",
        content: "All primitive types need to have lower-case variable names."},
    {category: "Java Building Blocks",
    sub_category: "Distinguishing Between Object References and Primitives",
    title: "Key Differences",
        content: "Methods can't be called on primitive types, only on reference objects."},
    {category: "Java Building Blocks",
    sub_category: "Declaring and Initializing Variables",
    title: "",
        content: "To declare a variable, I need to state the variable type and the name of the variable."},
    {category: "Java Building Blocks",
    sub_category: "Declaring and Initializing Variables",
    title: "",
        content: "To initialize a variable, I need to give it a value after an <code>=</code> assignment operator."},
    {category: "Java Building Blocks",
    sub_category: "Declaring and Initializing Variables",
    title: "",
        content: "Example: <code>int bananas = 3;</code>."},
    {category: "Java Building Blocks",
    sub_category: "Declaring and Initializing Variables",
    title: "Declaring Multiple Variables",
        content: "You can't declare the same type twice."},
    {category: "Java Building Blocks",
    sub_category: "Declaring and Initializing Variables",
    title: "Declaring Multiple Variables",
        content: "You can declare and initialize multiple variables on the same statement as long as they are from the same type."},
    {category: "Java Building Blocks",
    sub_category: "Declaring and Initializing Variables",
    title: "Identifiers",
        content: "You can declare variable names in camel case with <code>$</code>, <code>_</code> and the alphabet."},
    {category: "Java Building Blocks",
    sub_category: "Declaring and Initializing Variables",
    title: "Identifiers",
        content: "You can't use a reserved Java keyword."},
    {category: "Java Building Blocks",
    sub_category: "Understanding Default Initialization of Variables",
    title: "",
        content: "Some variables get a value set automatically, others don't."},
    {category: "Java Building Blocks",
    sub_category: "Understanding Default Initialization of Variables",
    title: "Local Variables",
        content: "Local variables are defined within a method."},
    {category: "Java Building Blocks",
    sub_category: "Understanding Default Initialization of Variables",
    title: "Local Variables",
        content: "Local variables are within the scope of the method and can't be called in an expression until initialized."},
    {category: "Java Building Blocks",
    sub_category: "Understanding Default Initialization of Variables",
    title: "Local Variables",
        content: "The compiler knows if a variable is declared and initialized and checks whether all the logical branches are initializing the eventually called variables."},
     {category: "Java Building Blocks",
    sub_category: "Understanding Default Initialization of Variables",
    title: "Local Variables",
        content: "Local variables have garbage data until initialized because they don't have a default value."},
    {category: "Java Building Blocks",
    sub_category: "Understanding Default Initialization of Variables",
    title: "Instance and Class Variables",
        content: "Variables that are not local are class or instance variables."},
    {category: "Java Building Blocks",
    sub_category: "Understanding Default Initialization of Variables",
    title: "Instance and Class Variables",
        content: "Instance variables are also known as fields."},
    {category: "Java Building Blocks",
    sub_category: "Understanding Default Initialization of Variables",
    title: "Instance and Class Variables",
        content: "Class variables can be shared between different objects."},
    {category: "Java Building Blocks",
    sub_category: "Understanding Default Initialization of Variables",
    title: "Instance and Class Variables",
        content: "Class variables have the keyword <code>static</code> in front of them."},
    {category: "Java Building Blocks",
    sub_category: "Understanding Default Initialization of Variables",
    title: "Instance and Class Variables",
        content: "By declaration they also get initialized with the default values: <br>
    - <code>boolean</code> → <code>false</code>. <br>
    - <code>byte</code>, <code>short</code>, <code>int</code>, <code>long</code> → <code>0</code>. <br>
    - <code>double</code>, <code>float</code> → <code>0.0</code>. <br>
    - object references → <code>null</code>."},
    {category: "Java Building Blocks",
    sub_category: "Understanding Variable Scope",
    title: "",
        content: "Instance variables - in scope the from declaration until object is garbage collected."},
    {category: "Java Building Blocks",
    sub_category: "Understanding Variable Scope",
    title: "",
        content: "Local variables - in scope from the declaration until end of the block."},
    {category: "Java Building Blocks",
    sub_category: "Understanding Variable Scope",
    title: "",
        content: "Class variables - in scope from the declaration until the program ends."},
    {category: "Java Building Blocks",
    sub_category: "Ordering Elements in a Class",
    title: "",
        content: "Order of declarations: <br>
    1. Package declaration. <br>
        - <code>package banana;</code> not required, first line.<br>
    2. Import statement.<br>
        - <code>import java.util.*;</code> not required.<br>
    3. Class declaration.<br>
        - <code>class Banana {};</code> required.<br>
            - Methods and fields must be within a class."},
    {category: "Java Building Blocks",
    sub_category: "Ordering Elements in a Class",
    title: "",
        content: "There can be more classes in a file but none, or at most one must be public."},
    {category: "Java Building Blocks",
    sub_category: "Destroying Objects",
    title: "",
        content: "Java deletes created objects automatically from the memory heap."},
    {category: "Java Building Blocks",
    sub_category: "Destroying Objects",
    title: "Garbage Collection",
        content: "An object or a reference gets garbage collected when there is no reference pointing to an object, or the object goes out of scope."},
     {category: "Java Building Blocks",
    sub_category: "Destroying Objects",
    title: "Garbage Collection",
        content: "Garbage collection happens when an object becomes obsolete."},
    {category: "Java Building Blocks",
    sub_category: "Destroying Objects",
    title: "Garbage Collection",
        content: "<code>System.gs</code> is not guaranteed to run, it is a suggestion for Java to run it."},
    {category: "Java Building Blocks",
    sub_category: "Destroying Objects",
    title: "Garbage Collection",
        content: "There is a difference between the references and their objects."},
    {category: "Java Building Blocks",
    sub_category: "Destroying Objects",
    title: "Garbage Collection",
        content: "All references can be passed through methods and are of the same size, which can be reassigned."},
    {category: "Java Building Blocks",
    sub_category: "Destroying Objects",
    title: "Garbage Collection",
        content: "Objects are on the memory heap of warring sizes."},
    {category: "Java Building Blocks",
    sub_category: "Destroying Objects",
    title: "Garbage Collection",
        content: "An object sits on the heap of the memory with no name until it gets called by the garbage collection."},
    {category: "Java Building Blocks",
    sub_category: "Destroying Objects",
    title: "<code>finalize()</code>",
        content: "Runs after the attempt of Java to do garbage collection, it might run, it might not, and it won't get called twice."},
    {category: "Java Building Blocks",
    sub_category: "Benefits of Java",
    title: "",
        content: "Object-oriented: All of the code in Java is in classes and classes can instantiate objects. It also allows for functional programming but everything is a class in Java."},
    {category: "Java Building Blocks",
    sub_category: "Benefits of Java",
    title: "",
        content: "Robust: It has no memory leaks like in C++."},
    {category: "Java Building Blocks",
    sub_category: "Benefits of Java",
    title: "",
        content: "Secure: It runs in the JVM, which is a sandbox preventing Java code to do harm to the computer."},
    {category: "Java Building Blocks",
    sub_category: "Benefits of Java",
    title: "",
        content: "Simple: No pointers and no operator overloading."},
    {category: "Java Building Blocks",
    sub_category: "Benefits of Java",
    title: "",
        content: "Encapsulation: Java allows for access modifiers to prevent data from getting accessed accidentally."},
    {category: "Java Building Blocks",
    sub_category: "Benefits of Java",
    title: "",
        content: "Platform independent: Write once run everywhere. Because it is an interpreted language, compiled into bytecode."}])
 
puts "😊Created: Java Building Blocks"
puts "🤔🤔Creating: Operators and Statements"

Material.create!([
    {category: "Operators and Statements",
    sub_category: "Understanding Java Operators",
    title: "",
        content: "Operators are a special kind of symbol that Java understands as something to transform. "},
    {category: "Operators and Statements",
    sub_category: "Understanding Java Operators",
    title: "",
        content: "They act on operands — numbers, strings, literals, booleans."},
    {category: "Operators and Statements",
    sub_category: "Understanding Java Operators",
    title: "",
        content: "Standard operation direction is from left to right, but in some cases reversed."},
    {category: "Operators and Statements",
    sub_category: "Understanding Java Operators",
    title: "",
        content: "Types of operators for the OCA by their order of precedence: <br>
        1. Post-unary-operators: <code>expression++</code>. <br>
        2. Pre-unary-operators: <code>++expression</code>. <br>
        3. Other unary operators: <code>!</code> <code>-</code> <code>+</code>. <br>
        4. Multiplication / Division / Modulus: <code>*</code> <code>/</code> <code>%</code>. <br>
        5. Addition / Subtraction: <code>+</code> <code>-</code>.  <br>
        6. Relational operators <code><</code> <code>></code> <code>≥</code> <code>=<</code>. <br>
        7. Logical operators: <code>&</code> <code>^</code> <code>|</code>. <br>
        8. Short-circuit logical operators: <code>||</code> <code>&&</code>. <br>
        9. Ternary operators: <code>: ?</code>. <br>
        10. Assignment operators: <code>=</code> <code>+=</code> <code>-=</code>. "},
    {category: "Operators and Statements",
    sub_category: "Working with Binary Arithmetic Operators",
    title: "Arithmetic Operators",
        content: "Multiplication operators have a higher order precedence than addition operators."},
    {category: "Operators and Statements",
    sub_category: "Working with Binary Arithmetic Operators",
    title: "Arithmetic Operators",
        content: "Modulus gives out the remainder of a division. "},
    {category: "Operators and Statements",
    sub_category: "Working with Binary Arithmetic Operators",
    title: "Numeric Promotion",
        content: "If two are from a different datatype, the smaller datatype gets promoted to the bigger datatype and the result is the bigger datatype."},
    {category: "Operators and Statements",
    sub_category: "Working with Binary Arithmetic Operators",
    title: "Numeric Promotion",
        content: "If one type is integral and the other double, Java converts the integral into a double."},
    {category: "Operators and Statements",
    sub_category: "Working with Binary Arithmetic Operators",
    title: "Numeric Promotion",
        content: "<code>short</code>,<code>byte</code> and <code>char</code> are always converted into an<code>int</code>."},
    {category: "Operators and Statements",
    sub_category: "Working with Binary Arithmetic Operators",
    title: "Numeric Promotion",
        content: "A<code>float</code> gets converted into a<code>double</code>."},
    {category: "Operators and Statements",
    sub_category: "Working with Binary Arithmetic Operators",
    title: "Numeric Promotion",
        content: "Unary operands are excluded from this rule."},
    {category: "Operators and Statements",
    sub_category: "Working with Unary Operators",
    title: "",
        content: "Unary operators require one variable expression or function."},
    {category: "Operators and Statements",
    sub_category: "Working with Unary Operators",
    title: "Logical Complement and Negation Operators",
        content: "<code>!</code> reverses a boolean, <code>-</code> makes a number negative."},
    {category: "Operators and Statements",
    sub_category: "Working with Unary Operators",
    title: "Increment and Decrement Operators",
        content: "Pre- returns the new value right away, post- returns the current value, but stores the new value in the variable."},
    {category: "Operators and Statements",
    sub_category: "Using Additional Binary Operators",
    title: "Assignment Operators",
        content: "Assignment operators assign what is on the right side of the operator to what is on the left side of the operator. Always keeping in mind that the datatypes are the same."},
    {category: "Operators and Statements",
    sub_category: "Using Additional Binary Operators",
    title: "Assignment Operators",
        content: "Java will automatically promote smaller to bigger datatypes. But not vice versa."},
    {category: "Operators and Statements",
    sub_category: "Using Additional Binary Operators",
    title: "Casting Primitive Values",
        content: "To assign bigger data types to smaller data types or floats/doubles to integers, we need to cast them by prepending the value with for example <code>(short)</code>, <code>(int)</code> etc..."},
    {category: "Operators and Statements",
    sub_category: "Using Additional Binary Operators",
    title: "Casting Primitive Values",
        content: "Overflow or underflow is when a value is too big for a datatype and the value wraps around the new lowest value."},
    {category: "Operators and Statements",
    sub_category: "Using Additional Binary Operators",
    title: "Compound Assignment Operators",
        content: "Assigns values and makes arithmetic operation to an already declared variable."},
    {category: "Operators and Statements",
    sub_category: "Using Additional Binary Operators",
    title: "Compound Assignment Operators",
        content: "The right hand side of an assignment can also be an expression."},
    {category: "Operators and Statements",
    sub_category: "Using Additional Binary Operators",
    title: "Compound Assignment Operators",
        content: "Casting is done automatically when necessary."},
    {category: "Operators and Statements",
    sub_category: "Using Additional Binary Operators",
    title: "Relational Operators",
        content: "Tell which operand is bigger or smaller."},
    {category: "Operators and Statements",
    sub_category: "Using Additional Binary Operators",
    title: "Relational Operators",
        content: "Return a boolean value."},
    {category: "Operators and Statements",
    sub_category: "Using Additional Binary Operators",
    title: "Logical Operators",
        content: "<code>&</code> AND - true if both operands are true."},
    {category: "Operators and Statements",
    sub_category: "Using Additional Binary Operators",
    title: "Logical Operators",
        content: "<code>|</code> Inclusive OR - true when at least one operand is true."},
    {category: "Operators and Statements",
    sub_category: "Using Additional Binary Operators",
    title: "Logical Operators",
        content: "<code>^</code> Exclusive OR - true if both operands are different."},
    {category: "Operators and Statements",
    sub_category: "Using Additional Binary Operators",
    title: "Logical Operators",
        content: "Short-circuit logical operators don't evaluate the second operand if the first one is conclusive."},
    {category: "Operators and Statements",
    sub_category: "Using Additional Binary Operators",
    title: "Equality Operators",
        content: "Two primitives can be checked for equality, their datatypes are being promoted."},
    {category: "Operators and Statements",
    sub_category: "Using Additional Binary Operators",
    title: "Equality Operators",
        content: "Two objects, including null and a String."},
    {category: "Operators and Statements",
    sub_category: "Using Additional Binary Operators",
    title: "Equality Operators",
        content: "Two boolean values."},
    {category: "Operators and Statements",
    sub_category: "Using Additional Binary Operators",
    title: "Equality Operators",
        content: "Object references can be equal if they point to the same place in memory."},
    {category: "Operators and Statements",
    sub_category: "Understanding Java Statements",
    title: "The <code>if-then</code> Statement",
        content: "<code>if(booleanExpression){}</code>."},
    {category: "Operators and Statements",
    sub_category: "Understanding Java Statements",
    title: "The <code>if-then</code> Statement",
        content: "Curly braces not required for the first line of code after the if statement."},
    {category: "Operators and Statements",
    sub_category: "Understanding Java Statements",
    title: "The <code>if-then-else</code> Statement",
        content: "<code>if(booleanExpression) {} else if{} else{}</code>."},
    {category: "Operators and Statements",
    sub_category: "Understanding Java Statements",
    title: "The <code>if-then-else</code> Statement",
        content: "Curly Braces required for block of multiple statements. Optional for single statement."},
    {category: "Operators and Statements",
    sub_category: "Understanding Java Statements",
    title: "The <code>if-then-else</code> Statement",
        content: "Order is important so that code is not unreachable."},
    {category: "Operators and Statements",
    sub_category: "Understanding Java Statements",
    title: "The <code>if-then-else</code> Statement",
        content: "<code>booleanExpression ? true : false</code>."},
    {category: "Operators and Statements",
    sub_category: "Understanding Java Statements",
    title: "The <code>if-then-else</code> Statement",
        content: "If you assign a ternary operator to a datatype, both outcomes must be in accordance with said datatype."},
    {category: "Operators and Statements",
    sub_category: "Understanding Java Statements",
    title: "The <code>if-then-else</code> Statement",
        content: "If you try to print it, the statements will be cast into strings."},
    {category: "Operators and Statements",
    sub_category: "Understanding Java Statements",
    title: "The <code>if-then-else</code> Statement",
        content: "The ternary operator short circuits if the true condition is met."},
    {category: "Operators and Statements",
    sub_category: "Understanding Java Statements",
    title: "The <code>switch</code> Statement",
        content: "<pre><code>switch(comparisonVariable){  
            case constantExpression:
                //stuff;
                break;
            default:
                //stuff;
                break;
         }</code></pre>"},
    {category: "Operators and Statements",
    sub_category: "Understanding Java Statements",
    title: "The <code>switch</code> Statement",
        content: "- Datatypes supported by switch statements: <br>
        - byte / Byte.<br>
        - short / Short.<br>
        - int / Integer.<br>
        - char / Character.<br>
        - String.<br>
        - enums."},
    {category: "Operators and Statements",
    sub_category: "Understanding Java Statements",
    title: "The <code>switch</code> Statement",
        content: "Case statements can only use literals, enum values or final constant variables."},
    {category: "Operators and Statements",
    sub_category: "Understanding Java Statements",
    title: "The <code>switch</code> Statement",
        content: "Datatypes can't mismatch."},
    {category: "Operators and Statements",
    sub_category: "Understanding Java Statements",
    title: "The <code>switch</code> Statement",
        content: "If there is no break statement, the code continues to the next case."},
    {category: "Operators and Statements",
    sub_category: "Understanding Java Statements",
    title: "The <code>while</code> Statement",
        content: "<code>while(nonConstantBoolean){}</code>."},
    {category: "Operators and Statements",
    sub_category: "Understanding Java Statements",
    title: "The <code>while</code> Statement",
        content: "Curly braces required for block of multiple statements. Optional for single statement."},
    {category: "Operators and Statements",
    sub_category: "Understanding Java Statements",
    title: "The <code>while</code> Statement",
        content: "Executes the code as long as the condition is true."},
    {category: "Operators and Statements",
    sub_category: "Understanding Java Statements",
    title: "The <code>do-while</code> Statement",
        content: "<code>do {} while(nonConstantBoolean)</code>."},
    {category: "Operators and Statements",
    sub_category: "Understanding Java Statements",
    title: "The <code>do-while</code> Statement",
        content: "Curly Braces required for block of multiple statements. Optional for single statement."},
    {category: "Operators and Statements",
    sub_category: "Understanding Java Statements",
    title: "The <code>do-while</code> Statement",
        content: "Just like while, the do-while loop executes the code at least once."},
    {category: "Operators and Statements",
    sub_category: "Understanding Java Statements",
    title: "The <code>for</code> Statement",
        content: "<code>for(initializatonStatement; booleanExpression; updateStatement) {}</code>."},
    {category: "Operators and Statements",
    sub_category: "Understanding Java Statements",
    title: "The <code>for</code> Statement",
        content: "<code>for(int x = 0; x > 9; x++){}</code>."},
    {category: "Operators and Statements",
    sub_category: "Understanding Java Statements",
    title: "The <code>for</code> Statement",
        content: "Can't reinitialize variables in initialization statement."},
    {category: "Operators and Statements",
    sub_category: "Understanding Java Statements",
    title: "The <code>for</code> Statement",
        content: "Can't declare different variable types in initialization statement."},
    {category: "Operators and Statements",
    sub_category: "Understanding Java Statements",
    title: "The <code>for</code> Statement",
        content: "All components are optional and if all are missing, infinite loop."},
    {category: "Operators and Statements",
    sub_category: "Understanding Java Statements",
    title: "The <code>for</code> Statement",
        content: "for-each <code>for(datatype instance : collection){instance}</code>."},
    {category: "Operators and Statements",
    sub_category: "Understanding Java Statements",
    title: "The <code>for</code> Statement",
        content: "Right-hand side is an iterable object, left hand side is a member of said object."},
    {category: "Operators and Statements",
    sub_category: "Understanding Advanced Flow Control",
    title: "Nested Loops",
        content: "Loops can contain loops."},
    {category: "Operators and Statements",
    sub_category: "Understanding Advanced Flow Control",
    title: "Adding Optional Labels",
        content: "A label is an optional pointer to the head of a statement that allows the application flow to, jump to, or break to it."},
    {category: "Operators and Statements",
    sub_category: "Understanding Advanced Flow Control",
    title: "Adding Optional Labels",
        content: "Same naming convention as variables except all uppercase letters followed by a colon."},
    {category: "Operators and Statements",
    sub_category: "Understanding Advanced Flow Control",
    title: "Adding Optional Labels",
        content: "They are useful in nested environments."},
    {category: "Operators and Statements",
    sub_category: "Understanding Advanced Flow Control",
    title: "The break Statement",
        content: "Exits the loop."},
    {category: "Operators and Statements",
    sub_category: "Understanding Advanced Flow Control",
    title: "The continue Statement",
        content: "Skips the rest of the body."}
])

puts "😊😊😊Created: Operators and Statements"
puts "🤔🤔🤔🤔Creating: Core Java APIs"

Material.create!([
    {category: "Core Java APIs",
    sub_category: "Creating and manipulating Strings",
    title: "",
        content: "<code>String name = \"Fluffy\";</code>and <code>String name = new String(\"Fluffy\");</code>both create a string."},
    {category: "Core Java APIs",
    sub_category: "Creating and manipulating Strings",
    title: "",
        content: "The former creates it in the String Pool, whereas the latter creates a new String object."},
    {category: "Core Java APIs",
    sub_category: "Creating and manipulating Strings",
    title: "",
        content: "The String class is special and does not need to be instantiated with the keyword <code>new</code>"},
    {category: "Core Java APIs",
    sub_category: "Creating and manipulating Strings",
    title: "Concatenation",
        content: "Rules with the plus operator (+): <br>
        - If both operands are numeric, it performs addition. <br>
        - If one operand is numeric and the other a string, it performs concatenation. <br>
        - If both operand are strings, it performs concatenation. <br>
        - The expression is evaluated from left to right."},
    {category: "Core Java APIs",
    sub_category: "Creating and manipulating Strings",
    title: "Immutability",
        content: "Strings, once created can't be changed, they are immutable."},
    {category: "Core Java APIs",
    sub_category: "Creating and manipulating Strings",
    title: "Immutability",
        content: "One can't replace one character, or the size of it. It's packed optimally."},
    {category: "Core Java APIs",
    sub_category: "Creating and manipulating Strings",
    title: "Immutability",
        content: "You can reassign a change."},
    {category: "Core Java APIs",
    sub_category: "Creating and manipulating Strings",
    title: "The String Pool",
        content: "The string pool contains literal values that appear in the program."},
    {category: "Core Java APIs",
    sub_category: "Creating and manipulating Strings",
    title: "Important String Methods",
        content: "int: <code>length();</code>& <code>indexOf();</code>;"},
    {category: "Core Java APIs",
    sub_category: "Creating and manipulating Strings",
    title: "Important String Methods",
        content: "char: <code>charAt();</code>;"},
    {category: "Core Java APIs",
    sub_category: "Creating and manipulating Strings",
    title: "Important String Methods",
        content: "String: <code>substring();</code>, <code>toLowerCase();</code>, <code>toUpperCase();</code>, <code>replace();</code>, <code>concat();</code>& <code>trim();</code>;"},
    {category: "Core Java APIs",
    sub_category: "Creating and manipulating Strings",
    title: "Important String Methods",
        content: "boolean: <code>equals();</code>, <code>equalsIgnoreCase();</code>, <code>startsWith();</code>, <code>endsWith();</code>& <code>contains();</code>"},
    {category: "Core Java APIs",
    sub_category: "Creating and manipulating Strings",
    title: "Important String Methods",
        content: "Strings are a sequence of characters and Java indexes them at 0."},
    {category: "Core Java APIs",
    sub_category: "Creating and manipulating Strings",
    title: "Important String Methods",
        content: "<code>int length()</code>: Counts the number of characters in a string, it counts from 1 onward. Java only counts from 0 when indexing or positions in a list."},
    {category: "Core Java APIs",
    sub_category: "Creating and manipulating Strings",
    title: "Important String Methods",
        content: "<code>int indexOf()</code>: Lets you figure out the first Index of a matching character. Also of a matching string, and takes in the parameter form which string to start looking from. <br>
        - <code>int indexOf (int ch), (int ch, int fromIndex), (String str), (String str, int fromIndex);</code>"},
    {category: "Core Java APIs",
    sub_category: "Creating and manipulating Strings",
    title: "Important String Methods",
        content: "<code>char charAt()</code>: Lets you query the string to find out which character is at an index position. Counts form 0 and up."},
    {category: "Core Java APIs",
    sub_category: "Creating and manipulating Strings",
    title: "Important String Methods",
        content: "<code>String substring()</code>: Returns a string based on the input index. It starts at that index and finishes at the end, the second parameter is the index at which the sub-string should end. The substring begins at the specified beginIndex and extends to the character at index endIndex – 1. Thus the length of the substring is endIndex-beginIndex. In other words you can say that beginIndex is inclusive and endIndex is exclusive while getting the substring. <br> 
        - An empty string is returned if both arguments are the same index number."},
    {category: "Core Java APIs",
    sub_category: "Creating and manipulating Strings",
    title: "Important String Methods",
        content: "<code>String toLowerCase()</code>& <code>String toUpperCase()</code>: Turns all lowercase characters to uppercase, and vice versa."},
    {category: "Core Java APIs",
    sub_category: "Creating and manipulating Strings",
    title: "Important String Methods",
        content: "<code>String replace()</code>: Search and replace of every matching character ⇒ <code>String replace(char oldChar, char newChar);</code>"},
    {category: "Core Java APIs",
    sub_category: "Creating and manipulating Strings",
    title: "Important String Methods",
        content: "<code>String trim()</code>: removes white space from beginning and end including <code>/t</code>, <code>/n</code>, and <code>/r</code>"},
    {category: "Core Java APIs",
    sub_category: "Creating and manipulating Strings",
    title: "Important String Methods",
        content: "<code>boolean equals()</code>& <code>boolean equalsIgnoreCase()</code>: Checks whether 2 String objects contain the same characters in the same order, and the <code>equalsIgnoreCase()</code>converts them if necessary."},
    {category: "Core Java APIs",
    sub_category: "Creating and manipulating Strings",
    title: "Important String Methods",
        content: "<code>boolean startsWith()</code>& <code>boolean endsWith()</code>: Checks case sensitive equality to the characters in the string."},
    {category: "Core Java APIs",
    sub_category: "Creating and manipulating Strings",
    title: "Important String Methods",
        content: "<code>boolean contains()</code>: looks for matches in the string, it can be anywhere in the String."},
    {category: "Core Java APIs",
    sub_category: "Creating and manipulating Strings",
    title: "Method Chaining",
        content: "Evaluates from left to right. It returns and gets picked up by the one on the right and so on."},
    {category: "Core Java APIs",
    sub_category: "Using the <code>StringBuilder</code> Class",
    title: "",
        content: "<code>StringBuilder</code>is mutable and it does not store interim strings to memory for efficiency purposes."},
    {category: "Core Java APIs",
    sub_category: "Using the <code>StringBuilder</code> Class",
    title: "Mutability and Chaining",
        content: "<code>StringBuilder</code>does not save itself into memory every time there is a change on it, instead it changes its own state and returns a reference to itself."},
    {category: "Core Java APIs",
    sub_category: "Using the <code>StringBuilder</code> Class",
    title: "Mutability and Chaining",
        content: "Pay attention to how many <code>StringBuilder sb = new StringBuilder(\"String\");</code>"},
    {category: "Core Java APIs",
    sub_category: "Using the <code>StringBuilder</code> Class",
    title: "Creating a <code>StringBuilder</code>",
        content: "<code>StringBuilder sb = new StringBuilder();.</code>"},
    {category: "Core Java APIs",
    sub_category: "Using the <code>StringBuilder</code> Class",
    title: "Creating a <code>StringBuilder</code>",
        content: "<code>StringBuilder sb = new StringBuilder();.</code>"},
    {category: "Core Java APIs",
    sub_category: "Using the <code>StringBuilder</code> Class",
    title: "Creating a <code>StringBuilder</code>",
        content: "<code>StringBuilder sb = new StringBuilder(\"banana\");.</code>"},
    {category: "Core Java APIs",
    sub_category: "Using the <code>StringBuilder</code> Class",
    title: "Important <code>StringBuilder</code> Methods",
        content: "int: <code>length();</code>, <code>indexOf();</code>;"},
    {category: "Core Java APIs",
    sub_category: "Using the <code>StringBuilder</code> Class",
    title: "Important <code>StringBuilder</code> Methods",
        content: "char: <code>charAt();</code>;"},
    {category: "Core Java APIs",
    sub_category: "Using the <code>StringBuilder</code> Class",
    title: "Important <code>StringBuilder</code> Methods",
        content: "String: <code>substring()</code>, <code>toString();</code>;"},
    {category: "Core Java APIs",
    sub_category: "Using the <code>StringBuilder</code> Class",
    title: "Important <code>StringBuilder</code> Methods",
        content: "StringBuilder: <code>append();</code>, <code>insert();</code>, <code>delete();</code>, <code>deleteCharAt();</code>, <code>reverse();</code>;"},
    {category: "Core Java APIs",
    sub_category: "Using the <code>StringBuilder</code> Class",
    title: "Important <code>StringBuilder</code> Methods",
        content: "<code>charAt(), indexOf(), length(), substring()</code><br>
        - <code>StringBuilder append(String str)</code> <br>
            - Not only strings but a lot of other datatypes. <br>
        - The same for StringBuilder as for String."},
    {category: "Core Java APIs",
    sub_category: "Using the <code>StringBuilder</code> Class",
    title: "Important <code>StringBuilder</code> Methods",
        content: "<code>StringBuilder insert(int offset, String str)</code> <br>
        - Pay attention that the indexes shift with every insert."},
    {category: "Core Java APIs",
    sub_category: "Using the <code>StringBuilder</code> Class",
    title: "Important <code>StringBuilder</code> Methods",
        content: "<code>StringBuilder delete(int start, int end);</code> and <code>StringBuilder deleteCharAt(int index);</code> ⇒ <code>StringBuilder delete(int start, int end);</code>. <br>
        - Opposite of insert."},
    {category: "Core Java APIs",
    sub_category: "Using the <code>StringBuilder</code> Class",
    title: "Important <code>StringBuilder</code> Methods",
        content: "<code>StringBuilder reverse();</code>it reverses the string arrangement."},
    {category: "Core Java APIs",
    sub_category: "Using the <code>StringBuilder</code> Class",
    title: "Important <code>StringBuilder</code> Methods",
        content: "<code>String toString();</code>it converts a stringBuilder to a string."},
    {category: "Core Java APIs",
    sub_category: "Using the <code>StringBuilder</code> Class",
    title: "<code>StringBuilder</code> vs. <code>StringBuffer</code>",
        content: "They do the same thing, the former is faster."},
    {category: "Core Java APIs",
    sub_category: "Understanding Equality",
    title: "",
        content: "<code>==</code>compares object references to memory including the string pool."},
    {category: "Core Java APIs",
    sub_category: "Understanding Equality",
    title: "",
        content: "</code>equals</code>compares logical equality values, if an objects class doesn't have the <code>.equals()</code>, than java compares it's references."},
    {category: "Core Java APIs",
    sub_category: "Understanding Equality",
    title: "",
        content: "String has a logical equality method, StringBuilder does not."},
    {category: "Core Java APIs",
    sub_category: "Understanding Java Arrays",
    title: "",
        content: "<code>char[] letters</code>; letters is a reference variable, <code>char</code>is a primitive designating what datatypes go into the array and <code>[]</code>is a symbol for an array."},
    {category: "Core Java APIs",
    sub_category: "Understanding Java Arrays",
    title: "Creating an Array of Primitives",
        content: "<code>int[] numbers1 = new int[3];</code>- specifies the capacity."},
    {category: "Core Java APIs",
    sub_category: "Understanding Java Arrays",
    title: "Creating an Array of Primitives",
        content: "<code>int[] numbers2 = new int[] {42, 33, 32};</code>- specifies the capacity and the initial values. <br>
        - Shortcut <code>int[] numbers2 = {42, 33, 32};</code>"},
    {category: "Core Java APIs",
    sub_category: "Understanding Java Arrays",
    title: "Creating an Array of Primitives",
        content: "Legal ways: <code>int[] numAnimals;</code><code>int [] numAnimals;</code><code>int numAnimals[];</code> <code>int numAnimals [];</code>"},
    {category: "Core Java APIs",
    sub_category: "Understanding Java Arrays",
    title: "Creating an Array of Primitives",
        content: "<code>int [] ids, types;</code>- declares two arrays."},
    {category: "Core Java APIs",
    sub_category: "Understanding Java Arrays",
    title: "Creating an Array of Primitives",
        content: "<code>int ids[], types;</code>- declares one array and one integer."},
    {category: "Core Java APIs",
    sub_category: "Understanding Java Arrays",
    title: "Creating an Array with Reference Variables",
        content: "Arrays store reference variables to the objects in memory."},
    {category: "Core Java APIs",
    sub_category: "Understanding Java Arrays",
    title: "Creating an Array with Reference Variables",
        content: "An empty array stores default values for the datatypes it is declared for."},
    {category: "Core Java APIs",
    sub_category: "Understanding Java Arrays",
    title: "Creating an Array with Reference Variables",
        content: "Casting also works if you need to store a bigger datatype array into a smaller datatype array."},
    {category: "Core Java APIs",
    sub_category: "Understanding Java Arrays",
    title: "Using an Array",
        content: "Accessing an object in an array works through using it's index. <code>.length</code>gives us the max nr. of index + one and we don't want to get tricked by it."},
    {category: "Core Java APIs",
    sub_category: "Understanding Java Arrays",
    title: "Important Array Methods by return type:",
        content: "String: <code>java.util.Arrays.toString(array);</code>;"},
    {category: "Core Java APIs",
    sub_category: "Understanding Java Arrays",
    title: "Important Array Methods by return type:",
        content: "void: <code>java.util.Arrays.sort(array);</code>;"},
    {category: "Core Java APIs",
    sub_category: "Understanding Java Arrays",
    title: "Important Array Methods by return type:",
        content: "int: <code>java.util.Arrays.binarySearch(array, query);</code>& <code>.length</code>"},
    {category: "Core Java APIs",
    sub_category: "Understanding Java Arrays",
    title: "Sorting",
        content: "<code>Arrays.sort(Array);</code>"},
    {category: "Core Java APIs",
    sub_category: "Understanding Java Arrays",
    title: "Sorting",
        content: "You need to import java.util.Arrays or java.util.*."},
    {category: "Core Java APIs",
    sub_category: "Understanding Java Arrays",
    title: "Sorting",
        content: "Strings sort the first character alphabetically."},
    {category: "Core Java APIs",
    sub_category: "Understanding Java Arrays",
    title: "Searching",
        content: "<code>Arrays.searchBinary(Array);</code>"},
    {category: "Core Java APIs",
    sub_category: "Understanding Java Arrays",
    title: "Searching",
        content: "Array needs to be sorted to work, otherwise unpredictable."},
    {category: "Core Java APIs",
    sub_category: "Understanding Java Arrays",
    title: "Searching",
        content: "Searches for the index of a data."},
    {category: "Core Java APIs",
    sub_category: "Understanding Java Arrays",
    title: "Searching",
        content: "If non existent, it negates the proposed index value and subtracts one from it."},
    {category: "Core Java APIs",
    sub_category: "Understanding Java Arrays",
    title: "Varargs",
        content: "Variable arguments."},
    {category: "Core Java APIs",
    sub_category: "Understanding Java Arrays",
    title: "Varargs",
        content: "Use a variable defined using varargs as if it were a normal array."},
    {category: "Core Java APIs",
    sub_category: "Understanding Java Arrays",
    title: "Multidimensional Arrays",
        content: "Arrays can hold arrays as components which makes them multidimensional."},
    {category: "Core Java APIs",
    sub_category: "Understanding Java Arrays",
    title: "Creating a Multidimensional Array",
        content: "<code>int[][] vars1;</code>⇒ 2D."},
    {category: "Core Java APIs",
    sub_category: "Understanding Java Arrays",
    title: "Creating a Multidimensional Array",
        content: "<code>int vars2 [][];</code>⇒ 2D."},
    {category: "Core Java APIs",
    sub_category: "Understanding Java Arrays",
    title: "Creating a Multidimensional Array",
        content: "<code>int[] vars3 [];</code>⇒ 2D."},
    {category: "Core Java APIs",
    sub_category: "Understanding Java Arrays",
    title: "Creating a Multidimensional Array",
        content: "<code>int[] vars3 [], space [][];</code>⇒ 2D & 3D."},
    {category: "Core Java APIs",
    sub_category: "Understanding Java Arrays",
    title: "Creating a Multidimensional Array",
        content: "Size declaration ⇒ <code>String [][] rectangle = new String[3][2];</code>"},
    {category: "Core Java APIs",
    sub_category: "Understanding Java Arrays",
    title: "Creating a Multidimensional Array",
        content: "Asymmetrical content declaration ⇒ <code>int[][] differentSize = {{1,2}, {1}, {2,3,4,5}};</code>"},
    {category: "Core Java APIs",
    sub_category: "Understanding Java Arrays",
    title: "Using a Multidimensional Array",
        content: "Looping thought multidimensional arrays is most common."},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "",
        content: "An ArrayList can change the capacity as needed, as opposed to an Array."},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "",
        content: "You have to <code>import java.util.*;</code>"},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "",
        content: "Or import <code>java.util.ArrayList;</code>"},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Creating an <code>ArrayList</code>",
        content: "<code>Array list1 = new ArrayList();</code>- default nr. of slots."},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Creating an <code>ArrayList</code>",
        content: "<code>Array list2 = new ArrayList(10);</code>- specific nr. of slots."},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Creating an <code>ArrayList</code>",
        content: "<code>Array list3 = new ArrayList(list2);</code>- copy of the capacity and content of <code>list2</code>"},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Creating an <code>ArrayList</code>",
        content: "<code>ArrayList<String> list4 = new ArrayList<String>();</code>- Diamond operator specifies the datatype of the <code>ArrayList</code>content."},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Creating an <code>ArrayList</code>",
        content: "<code>ArrayList<String> list4 = new ArrayList<>();</code>- Can omit on the right side but need to keep <>."},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Creating an <code>ArrayList</code>",
        content: "<code>ArrayList</code>implements an interface called <code>List</code>"},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Creating an <code>ArrayList</code>",
        content: "Can store an <code>ArrayList</code>in a <code>List</code>reference but not vice versa."},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Important <code>ArrayList</code> methods by return type:",
        content: "boolean: <code>add(E element);</code>, <code>remove(Object object);</code>, <code>isEmpty();</code>, <code>contains(Object object);</code>& <code>equals(Object object);</code>;"},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Important <code>ArrayList</code> methods by return type:",
        content: "void: <code>add(int index, E element);</code>, <code>clear();</code>;"},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Important <code>ArrayList</code> methods by return type:",
        content: "E: <code>remove(int index);</code>, <code>set(int index, E newElement);</code>;"},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Important <code>ArrayList</code> methods by return type:",
        content: "int: <code>size();</code>"},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Using an <code>ArrayList</code>",
        content: "<code>E</code>- is used by convention in generics to mean \"any class that this array can hold\"."},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Using an <code>ArrayList</code>",
        content: "If I don't specify a type when creating an ArrayList, <code>E</code>means <code>Object</code>"},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Using an <code>ArrayList</code>",
        content: "<code>ArrayList</code>implements <code>toString()</code>"},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Using an <code>ArrayList</code>",
        content: "<code>add()</code>⇒ <code>boolean add(E element); void add(int index, E element);</code>adds an element to the end of an array, if the <code>ArrayList</code>type isn't specified by a diamond operator generic, the types are all stored in object, object can hold all types except primitives. Add can also specify the index at which elements are added and I keep track of the shifting indexes. Also, if I add a type not equal to the generic I get a compiler error."},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Using an <code>ArrayList</code>",
        content: "<code>remove()</code>⇒ <code>boolean remove(Object object); E remove(int index);</code>deletes the first matching value in the array or the value at the specified index. If it finds and removes a value, it prints true, if it doesn't find the value it prints false, if it finds the index it prints the removed value, if it doesn't find the index it throws and exception."},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Using an <code>ArrayList</code>",
        content: "<code>set()</code>⇒ <code>E set(int index, E newElement);</code>replaces an element in an ArrayList."},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Using an <code>ArrayList</code>",
        content: "<code>isEmpty()</code>and <code>size()</code>⇒ <code>boolean isEmpty(); int size();</code>former returns boolean, latter returns the size of the ArrayList."},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Using an <code>ArrayList</code>",
        content: "<code>clear()</code>⇒ <code>void clear();</code>It deletes all the elements from the ArrayList and brings the <code>ArrayList.size() = 0</code>"},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Using an <code>ArrayList</code>",
        content: "<code>contains()</code> ⇒ <code>boolean contains(Object object);</code>It checks whether a certain value is present in the ArrayList and returns a boolean."},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Using an <code>ArrayList</code>",
        content: "<code>equals()</code>⇒ <code>boolean equals(Object object)</code>Checks whether two ArrayLists have the same elements in the same order."},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Wrapper Classes",
        content: "For an <code>ArrayList</code>to accept a primitive, the primitive needs to be put within a corresponding wrapper class holding said primitive."},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Wrapper Classes",
        content: "boolean; Boolean; <code>new Boolean(true);</code>"},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Wrapper Classes",
        content: "byte; Byte; <code>new Byte((byte) 1);</code>"},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Wrapper Classes",
        content: "short; Short; <code>new Short((short) 1);</code>"},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Wrapper Classes",
        content: "int; Integer; <code>new Integer(1);</code>"},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Wrapper Classes",
        content: "long; Long; <code>new Long(1);</code>"},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Wrapper Classes",
        content: "float; Float; <code>new Float(1.0);</code>"},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Wrapper Classes",
        content: "double; Double; <code>new Double(1.0);</code>"},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Wrapper Classes",
        content: "char; Character; <code>new Character('a');</code>"},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Wrapper Classes",
        content: "<code>parse</code>methods return primitives and <code>valueOf</code>methods return wrappers."},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Wrapper Classes",
        content: "If the name of the primitive is in the method, it is returning that primitive."},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Wrapper Classes",
        content: "Boolean; <code>Boolean.parseBoolean(\"true\");</code><code>Boolean.valueOf(\"TRUE\");</code>"},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Wrapper Classes",
        content: "Byte; <code>Byte.parseByte(\"1\");</code><code>Byte.valueOf(\"2\");</code>"},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Wrapper Classes",
        content: "Short; <code>Short.parseShort(\"1\");</code><code>Short.valueOf(\"1\");</code>"},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Wrapper Classes",
        content: "Integer; <code>Integer.parsreInt(\"1\");</code><code>Integer.valueOf(\"2\");</code>"},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Wrapper Classes",
        content: "Long; <code>Long.parseLong(\"2\");</code><code>Long.valueOf(\"2\");</code>"},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Wrapper Classes",
        content: "Float; <code>Float.parseFloat(\"2\");</code><code>Float.valueOf(\"2.2\");</code>"},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Wrapper Classes",
        content: "Double; <code>Double.parseDouble(\"3\");</code><code>Double.valueOf(\"2.2\");</code>"},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Wrapper Classes",
        content: "Character; None; None;."},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Autoboxing",
        content: "Automatic conversion of primitives into Wrapper classes."},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Autoboxing",
        content: "Example: <code>List<Double> weights = new ArrayList<>();</code>"},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Autoboxing",
        content: "<code>weights.add(60.5); // [60.5]</code>← it autoboxes the primitive 60.5 into a Double 60.5."},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Converting Between array and List",
        content: "List to array: <br>
        - <code>ArrayList.toArray(new String[0]);</code> <br>
        - The <code>0</code> tells Java to allocate as many spaces as there are in the <code>ArrayList</code>, a higher number makes more spaces."},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Converting Between array and List",
        content: "Array to List: <br>
        - The original array and the created array backed list are linked.  <br>
        - When a change is made to one it is available to the other. <br>
        - It is a fixed-size, array-backed list."},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Sorting",
        content: "Same as with arrays only different helper."},
    {category: "Core Java APIs",
    sub_category: "Understanding an <code>ArrayList</code>",
    title: "Sorting",
        content: "<code>Collections.sort(arrayList);</code>"},
    {category: "Core Java APIs",
    sub_category: "Working with Dates and Times",
    title: "",
        content: "<code>import java.time.*</code>"},
    {category: "Core Java APIs",
    sub_category: "Working with Dates and Times",
    title: "Creating Dates and Times",
        content: "<code>LocalDate ⇒ LocalDate.now();</code> <br>
        - <code>LocalDate date1 = LocalDate.of(2015, Month.JANUARY, 20) OR (2015, 1, 20);</code>"},
    {category: "Core Java APIs",
    sub_category: "Working with Dates and Times",
    title: "Creating Dates and Times",
        content: "<code>LocalTime ⇒ LocalTime.now();</code> <br>
        - <code>LocalTime time1 = LocalTime.of(6, 15, 19, 200);</code>"},
    {category: "Core Java APIs",
    sub_category: "Working with Dates and Times",
    title: "Creating Dates and Times",
        content: "<code>LocalDateTime ⇒ LocalDateTime.now();</code> <br>
        - <code>LocalDateTime.of(2015, 1, 20, 5, 15, 19, 200) OR (date1, time1);</code>"},
    {category: "Core Java APIs",
    sub_category: "Working with Dates and Times",
    title: "Creating Dates and Times",
        content: "<code>LocalDate d = new LocalDate();</code>→ Does not compile."},
    {category: "Core Java APIs",
    sub_category: "Working with Dates and Times",
    title: "Manipulating Dates and Times",
        content: "Date and Time classes are immutable."},
    {category: "Core Java APIs",
    sub_category: "Working with Dates and Times",
    title: "Manipulating Dates and Times",
        content: "<code>date.plusDays</code>, <code>plusMoths</code>, <code>plusYears</code>, <code>plusWeeks</code>also all in minus."},
    {category: "Core Java APIs",
    sub_category: "Working with Dates and Times",
    title: "Manipulating Dates and Times",
        content: "<code>time.plusHours</code>, <code>plusMinutes</code>, <code>plusSeconds</code>also all in minus."},
    {category: "Core Java APIs",
    sub_category: "Working with Dates and Times",
    title: "Working with Periods",
        content: "Adds an arbitrary period of time."},
    {category: "Core Java APIs",
    sub_category: "Working with Dates and Times",
    title: "Working with Periods",
        content: "<code>Period quarterly = Period.ofMonths(3);</code>"},
    {category: "Core Java APIs",
    sub_category: "Working with Dates and Times",
    title: "Working with Periods",
        content: "<code>DateTime.plus(period);</code>"},
    {category: "Core Java APIs",
    sub_category: "Working with Dates and Times",
    title: "Formatting Dates and Times",
        content: "Many methods like: <code>getDayOfWeek</code>, <code>getMonth</code>, <code>getYear</code>, <code>getDayOfYear</code>"},
    {category: "Core Java APIs",
    sub_category: "Working with Dates and Times",
    title: "Formatting Dates and Times",
        content: "<code>time.format(DateTimeFormatter.ISO_LOCAL_DATE));</code>"},
    {category: "Core Java APIs",
    sub_category: "Working with Dates and Times",
    title: "Formatting Dates and Times",
        content: "<code>DateTimeFormatter shortDate = DateTimeFormatter.ofLocalizedDate(FormatStyle.SHORT);</code><br>
        - <code>shortDate.format(dateTime);</code>→ 1/20/20."},
    {category: "Core Java APIs",
    sub_category: "Working with Dates and Times",
    title: "Formatting Dates and Times",
        content: "<code>DateTimeFormatter shortDateTime = DateTimeFormatter.ofLocalozedDateTime(FormatStyle.SHORT);</code><br>
        - <code>shortDateTime.format(dateTime);</code>→  1/20/20 11:12 AM."},
    {category: "Core Java APIs",
    sub_category: "Working with Dates and Times",
    title: "Formatting Dates and Times",
        content: "<code>DateTimeFormatter mediumDateTime= DateTimeFormatter.ofLocalozedDateTime(FormatStyle.MEDIUM;</code><br>
        - <code>mediumDateTime.format(dateTime);</code>→  Jan 20, 2020 11;12;34 AM"},
    {category: "Core Java APIs",
    sub_category: "Working with Dates and Times",
    title: "Formatting Dates and Times",
        content: "<code>DateTimeFormatter.ofPattern(\"MMM dd, yyy, hh:mm\");</code>"},
    {category: "Core Java APIs",
    sub_category: "Working with Dates and Times",
    title: "Parsing Dates and Times",
        content: "<code>DateTimeFormatter f = DateTimeFormatter.ofPattern(\"MM dd yyyy\");</code>"},
    {category: "Core Java APIs",
    sub_category: "Working with Dates and Times",
    title: "Parsing Dates and Times",
        content: "<code>LocalDate = LocalDate.parse(\"01 02 2015\", f);</code>→ 02 01 2020."}
])

puts "😊😊😊😊😊Created: Core Java APIs"
puts "🤔🤔🤔🤔🤔🤔Creating: Methods and Encapsulation"

Material.create!([
    {category: "Methods and Encapsulation",
    sub_category: "SYBCATZ",
    title: "TATATITI",
        content: "FUCK ME BABY TILL I GET PREGGO"}
])

puts "😊😊😊😊😊😊😊Created: Methods and Encapsulation"
puts "🤔🤔🤔🤔🤔🤔🤔🤔Creating: Class Design"

Material.create!([
    {category: "Class Design",
    sub_category: "YALLA YALLA MIGRANTIMAZEDONIA",
    title: "THIRSSSSTTT",
        content: "MANDEL ODER HODEN?"}
])

puts "😊😊😊😊😊😊😊😊😊Created: Class Desing"
puts "🤔🤔🤔🤔🤔🤔🤔🤔🤔🤔Creating: Exceptions"

Material.create!([
    {category: "Exceptions",
    sub_category: "KOMISCHES INTRANETA",
    title: "I AM LITERALLY SCREAMING",
        content: "MANDEL ODER HODEN?"}
])

puts "😊😊😊😊😊😊😊😊😊😊😊Created: Exceptions"



puts "😀😀😀😀😀😀😀😀😀😀😀😀Database Seed Completed!"